#!/bin/sh
#
# Execute this to create setup file with hardcoded path
# Must rerun this if you move the directory
#
# Doug Wright

cd $(dirname $0)
#....on MacOSX must use -P to get physical path, i.e., to resolve links
[ $(uname) = Darwin ] && path=$(/bin/pwd -P) || path=$(/bin/pwd)
echo generating new setup script $path/setup

cat > setup <<!
#
# source setup
#
# Execute the correct setup script depending on which shell is running.
# 
# This determines the shell by trying to execute the command 'builtin', 
# which is only defined for sh (and bash). 
#
# This is better than checking the SHELL environment variable, 
# because SHELL is not set correctly when you run a shell script or 
# manually start a new shell.
# 
# Also, you can not use "setenv" to determine if csh is running, 
# because on some systems this is defined for sh and bash.
#
# Source scripts (as opposed to full shell scripts) can not determine
# the path to the location of the script, and could even be executed
# via a soft link, so you must hard code the path.
#
# I use cd and pwd commands to set and pass the path to the .sh and .csh scripts,
# because this avoids shell specific syntax for defining variables.
#
# Double quotes around pwd command is important in case path contains spaces.
#
# Doug Wright
#
# This file was generated by setup.create. 
# Rerun setup.create, if you change the directory containing the script.
 
cd "$path"
source ./setup.\`builtin >&/dev/null || echo c\`sh "\`/bin/pwd\`"
cd - > /dev/null
!
