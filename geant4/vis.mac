# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

/vis/viewer/set/background 0.85 0.85 0.85

# Draw geometry:
/vis/drawVolume
#/vis/drawVolume module
#/vis/drawVolume fiber

# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 90. 90.

# Specify zoom value:
#/vis/viewer/zoom 1.4

# Specify style (surface or wireframe):
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100

/control/execute vis_color.mac

# Draw coordinate axes:
/vis/scene/add/axes 0 0 0 0.5 m
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits

# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma

# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true

# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate 10

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
